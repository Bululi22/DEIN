package controller;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;

import javafx.scene.control.TextField;
import javafx.scene.control.cell.CheckBoxTableCell;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;


import java.io.FileInputStream;
import java.net.URL;
import java.util.ResourceBundle;

import dao.ProductosDao;
import javafx.beans.property.ReadOnlyBooleanWrapper;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.scene.input.MouseEvent;
import model.Producto;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.MenuItem;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;

public class ProductosController implements Initializable {
	@FXML
	private ImageView img;
	@FXML
	private TextField tfCodigoProducto;
	@FXML
	private TextField tfNombre;
	@FXML
	private TextField tfPrecio;
	@FXML
	private CheckBox cbDisponible;
	@FXML
	private Button btnSeleccionImagen;
	@FXML
	private Button btnCrear;
	@FXML
	private Button btnActualizar;
	@FXML
	private Button btnLimpiar;
	@FXML
	private TableView tabla;
	

	private ObservableList lista;
	private String codigo, nombre, precio;
	private Float pre;
	private int disponible;
	private ProductosDao dao;
	private Producto p;

	// Event Listener on MenuItem.onAction
	@FXML
	public void acercaDe(ActionEvent event) {
		Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setHeaderText(null);
        alert.setTitle("INFO");
        alert.setContentText("Gestión de preoductos 1.0 \nAutor: Adrián Ferradás");
        alert.showAndWait();
	}

	// Event Listener on Button[#btnSeleccionImagen].onAction
	@FXML
	public void seleccionImagen(ActionEvent event) {
		// TODO Autogenerated
	}

	// Event Listener on Button[#btnCrear].onAction
	@FXML
	public void crear(ActionEvent event) {
		String msg = validacion();
		if(msg.equals("")) {
			Producto p = new Producto(codigo, nombre, precio, disponible);
			msg+=dao.crearProductos(p);
		}
		if(msg.equals("")) {
			Alert alert = new Alert(Alert.AlertType.INFORMATION);
	        alert.setHeaderText(null);
	        alert.setTitle("Hecho :)");
	        alert.setContentText("Creado correctamente \n");
	        try {
				lista = dao.cargarProductos();
				tabla.setItems(lista);
			} catch (Exception e) {
				e.printStackTrace();
				System.out.println("Error en carga");
			}
	        alert.showAndWait();
	        try {
				lista = dao.cargarProductos();
				tabla.setItems(lista);
			} catch (Exception e) {
				e.printStackTrace();
				System.out.println("Error de carga");
			}
	        limpiar();
		}else {
			leerError(msg);
		}
	}

	// Event Listener on Button[#btnActualizar].onAction
	@FXML
	public void actualizar(ActionEvent event) {
		String msg = validacion();
		if(msg.equals("")) {
			Producto p = new Producto(codigo, nombre, precio, disponible);
			msg+=dao.editarProductos(p);
		}
		if(msg.equals("")) {
			Alert alert = new Alert(Alert.AlertType.INFORMATION);
	        alert.setHeaderText(null);
	        alert.setTitle("Hecho :)");
	        alert.setContentText("Actualizado correctamente \n");
	        try {
				lista = dao.cargarProductos();
				tabla.setItems(lista);
			} catch (Exception e) {
				e.printStackTrace();
				System.out.println("Error en carga");
			}
	        limpiar();
	        alert.showAndWait();
		}else {
			leerError(msg);
		}
	}

	// Event Listener on Button[#btnLimpiar].onAction
	@FXML
	public void limpiar(ActionEvent event) {
		limpiar();
	}

	public void limpiar() {
		tfCodigoProducto.setText("");
		tfNombre.setText("");
		tfPrecio.setText("");
		cbDisponible.setSelected(false);

		tfCodigoProducto.setDisable(false);
		btnCrear.setDisable(false);
		btnActualizar.setDisable(true);
	}

	// Event Listener on TableView[#tabla].onMouseClicked
	@FXML
	public void clickDerecho(MouseEvent event) {
		
		System.out.println("**");
		tablaSeleccionada();

		ContextMenu contextMenu = new ContextMenu();
		  
        // create menuitems
        MenuItem miVarImg = new MenuItem("Ver Imagen");
        MenuItem miEliminar = new MenuItem("Eliminar");
  
        // add menu items to menu
        contextMenu.getItems().add(miVarImg);
        contextMenu.getItems().add(miEliminar);

        tabla.setContextMenu(contextMenu);

        miEliminar.setOnAction(e -> eliminar());
		
	}

	public String validacion() {
		String msg = "";
		
		codigo = tfCodigoProducto.getText().toString();
		nombre = tfNombre.getText().toString();
		precio = tfPrecio.getText().toString();
		if (cbDisponible.isSelected()) {
			disponible = 1;
		}else {
			disponible = 0;
		}
		
		
		if (codigo.length()!=5) {
			msg+="Campo 'codigo' necesita 5 digitos exactamente \n";
		}
		if (nombre.equals("")) {
			msg+="Campo 'nombre' no puede estar vacio \n";
		}
		try {
			float aux = Float.parseFloat(precio);
		}catch (NumberFormatException e) {
			msg += "Campo 'precio' tiene que ser numerico \n"; 
		}
		return msg;
	}
	
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		try {
			dao = new ProductosDao();
			lista = dao.cargarProductos();

			TableColumn<Producto, String> colCodigo = new TableColumn<>("CÓDIGO");
			colCodigo.setCellValueFactory(new PropertyValueFactory<>("codigo"));
			colCodigo.prefWidthProperty().bind(tabla.widthProperty().multiply(0.25));

			TableColumn<Producto, String> colNombre = new TableColumn<>("NOMBRE");
			colNombre.setCellValueFactory(new PropertyValueFactory<>("nombre"));
			colNombre.prefWidthProperty().bind(tabla.widthProperty().multiply(0.25));

			TableColumn<Producto, Float> colPrecio = new TableColumn<>("PRECIO");
			colPrecio.setCellValueFactory(new PropertyValueFactory<>("precio"));
			colPrecio.prefWidthProperty().bind(tabla.widthProperty().multiply(0.25));

	        TableColumn<Producto, Boolean> colDisponible = new TableColumn<>("DISPONIBLE");
	        colDisponible.setCellValueFactory(cellData -> {
	        	Producto p = cellData.getValue();
	            Boolean v = (p.getDisponible() == 1);
	            return new ReadOnlyBooleanWrapper(v);
	        });
	        colDisponible.setCellFactory(CheckBoxTableCell.<Producto>forTableColumn(colDisponible));
	        colDisponible.prefWidthProperty().bind(tabla.widthProperty().multiply(0.245));

			
			tabla.getColumns().addAll(colCodigo, colNombre, colPrecio, colDisponible);
			tabla.setItems(lista);
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void leerError(String msg) {
		Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setHeaderText(null);
        alert.setTitle("Error");
        alert.setContentText(msg);
        alert.showAndWait();
	}
	
	private void tablaSeleccionada() {
		try {
			p = (Producto) tabla.getSelectionModel().getSelectedItem();
			
			tfCodigoProducto.setText(p.getCodigo());
			tfNombre.setText(p.getNombre());
			tfPrecio.setText(p.getPrecio());
			if (p.getDisponible()==1) {
				cbDisponible.setSelected(true);
			}else {
				cbDisponible.setSelected(false);
			}
			
			tfCodigoProducto.setDisable(true);
			btnCrear.setDisable(true);
			btnActualizar.setDisable(false);
			
			

			Image image = new Image(new FileInputStream("/images/chorizo.png"));  
			img.setImage(image);
		}catch (Exception e) {}
	}
	
	public void eliminar() {
		System.out.println("*-*-*--*-*");
		try {
			dao.borrarProductos(p);
			Alert alert = new Alert(Alert.AlertType.INFORMATION);
	        alert.setHeaderText(null);
	        alert.setTitle("Eliminado");
	        alert.setContentText("Eliminado correctamente \n");
	        alert.showAndWait();
	        try {
				lista = dao.cargarProductos();
				tabla.setItems(lista);
			} catch (Exception e) {
				e.printStackTrace();
				System.out.println("Error de carga");
			}
	        limpiar();
		} catch (Exception e) {
			e.printStackTrace();
			leerError("Error al borrar");
		}
	}
}
