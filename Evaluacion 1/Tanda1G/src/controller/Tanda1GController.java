package controller;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;

import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.GridPane;
import javafx.stage.FileChooser;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.stage.Window;
import javafx.stage.FileChooser.ExtensionFilter;
import model.Persona;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.URL;
import java.util.ResourceBundle;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.control.TableView;

import javafx.scene.control.TableColumn;

public class Tanda1GController implements Initializable{
	private ObservableList<Persona> lista, listaFiltrada;
	@FXML
	private TextField tfFiltro;
	@FXML
	private Button btnImportar;
	@FXML
	private Button btnExportar;
	@FXML
	private TableView<Persona> tabla;
	@FXML
	private TableColumn<Persona, String> colNombre;
	@FXML
	private TableColumn<Persona, String> colApellido;
	@FXML
	private TableColumn<Persona, String> colEdad;
	@FXML
	private Button btnAgregar;
	@FXML
	private Button btnModificar;
	@FXML
	private Button btnEliminar;
	@FXML
	private GridPane grid;
	
	private Persona p;
	
	private Stage stage;

	// Event Listener on Button[#btnAgregar].onAction
	@FXML
	public void agregar(ActionEvent event) {
		// TODO Autogenerated
		stage = (Stage) btnModificar.getScene().getWindow();
		ventana(0);
	}

	// Event Listener on Button[#btnModificar].onAction
	@FXML
	public void modificar(ActionEvent event) {
		// TODO Autogenerated
		stage = (Stage) btnModificar.getScene().getWindow();
		ventana(1);
		tabla.getSelectionModel().clearSelection();
	}
	
	// Event Listener on Button[#btnModificar].onAction
	@FXML
	public void eliminar(ActionEvent event) {
		// TODO Autogenerated
		stage = (Stage) btnModificar.getScene().getWindow();
		try {
			p = (Persona) tabla.getSelectionModel().getSelectedItem();
			if (p!=null) {
				lista.remove(p);
				tabla.refresh();
				mostrarAlertInfo(stage, "Persona eliminada correctamente");
				tabla.getSelectionModel().clearSelection();
			}
			else {
				mostrarAlertError(stage, "Selecciona una persona de la lista");
			}
		}catch (Exception e) {
			// TODO: handle exception
			mostrarAlertError(stage, "Selecciona una persona de la lista");
		}
	}
	
	// Event Listener on Button[#btnModificar].onAction
	@FXML
	public void importar(ActionEvent event) {
		// TODO Autogenerated
		try {
			stage = (Stage) btnModificar.getScene().getWindow();
			Persona p;
			String[] partes;
			FileChooser fc=new FileChooser();
			fc.setTitle("Elige el CSV");
			fc.getExtensionFilters().add(new ExtensionFilter("Archivo CSV", "*.csv", "*.csv"));
			fc.setSelectedExtensionFilter(fc.getExtensionFilters().get(0));
			File archivo=fc.showOpenDialog(stage);
			try {
				BufferedReader br=new BufferedReader(new FileReader(archivo));
				int cont=0;
				String linea=br.readLine();
				while(linea!=null) {
					if(cont!=0) {
						partes=linea.split(",");
						p=new Persona(partes[0],partes[1],partes[2]);
						tabla.getItems().add(p);
					}
					cont++;
					linea=br.readLine();
				}
				br.close();
				tabla.refresh();
				mostrarAlertInfo(stage, "Importado con exito");
			} catch (IOException e) {
				mostrarAlertError(stage, "Importacion fallida");
				e.printStackTrace();
			}
		}catch (Exception e){}
	}
	
	// Event Listener on Button[#btnModificar].onAction
	@FXML
	public void exportar(ActionEvent event) {
		// TODO Autogenerated
		try {
			stage = (Stage) btnModificar.getScene().getWindow();
			PrintWriter pw;
			FileChooser fc=new FileChooser();
			fc.getExtensionFilters().add(new ExtensionFilter("Archivo CSV", "*.csv", "*.csv"));
			fc.setSelectedExtensionFilter(fc.getExtensionFilters().get(0));
			File archivo=fc.showSaveDialog(stage);
			try {
				pw=new PrintWriter(archivo);
				String msg="Nombre,Apellido,Edad\n";
				for (int i = 0; i < tabla.getItems().size(); i++) {
					msg+=tabla.getItems().get(i).getNombre()+","+tabla.getItems().get(i).getApellido()+","+tabla.getItems().get(i).getEdad()+"\n";
				}
				pw.write(msg);
				pw.close();
				mostrarAlertInfo(stage, "Exportado con exito");
			} catch (IOException e) {
				mostrarAlertError(stage, "Exportacion fallida");
				e.printStackTrace();
			}
		}catch (Exception e){}
	}
	
	// Event Listener on Button[#btnModificar].onAction
	@FXML
	public void filtrar(KeyEvent event) {
		// TODO Autogenerated
		String nom="";
		listaFiltrada=FXCollections.observableArrayList();
		nom=tfFiltro.getText();
		for (int i = 0; i < lista.size(); i++) {
			if(lista.get(i).getNombre().contains(nom)) {
				listaFiltrada.add(lista.get(i));
			}
		}
		tabla.refresh();
		tabla.setItems(listaFiltrada);
		if(nom.isEmpty()){
			tabla.setItems(lista);
		}
	}
	
	public void ventana(int agrmod) {
		@SuppressWarnings("unused")
		String msg = "";
		try{
			FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/VentanaModal.fxml"));
			Parent root = loader.load();
			Scene newScene = new Scene(root);
			Stage newStage = new Stage();
			VentanaModalController control = loader.getController();
			newStage.initModality(Modality.APPLICATION_MODAL);
			newStage.initOwner(this.btnAgregar.getScene().getWindow());
			newStage.setResizable(false);
			newStage.setMaximized(false);
			newStage.setScene(newScene);
			if (agrmod==0) {
				newStage.setTitle("Nueva Persona");
				control.cargarDatos(lista,agrmod);
				newStage.showAndWait();
				tabla.refresh();
			}else {
				try {
					newStage.setTitle("Editar Persona");
					p = (Persona) tabla.getSelectionModel().getSelectedItem();
					control.getTfNombre().setText(p.getNombre());
			    	control.getTfApellido().setText(p.getApellido());
			    	control.getTfEdad().setText(p.getEdad());
					control.cargarDatos(lista,agrmod,tabla);
			    	newStage.showAndWait();
					tabla.refresh();    	
				}
				catch (Exception e) {
					// TODO: handle exception
					mostrarAlertError(tabla.getScene().getWindow(), "Selecciona una Persona");
				}	
			}
	    } catch (IOException e) {
	    	mostrarAlertError(tabla.getScene().getWindow(), "Selecciona una persona de la lista");
	    	e.printStackTrace();
	    }

	}

	
	private void mostrarAlertError(Window win, String msg) {
		Alert alert = new Alert(Alert.AlertType.ERROR);
		alert.initOwner(win);
		alert.setHeaderText(null);
		alert.setTitle("Error");
		alert.setContentText(msg);
		alert.showAndWait();
	}
	
	private void mostrarAlertInfo(Window win, String msg) {
		Alert alert = new Alert(Alert.AlertType.INFORMATION);
		alert.initOwner(win);
		alert.setHeaderText(null);
		alert.setTitle("Info");
		alert.setContentText(msg);
		alert.showAndWait();
	}

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub
		
		
		lista = FXCollections.observableArrayList();
		tabla.setItems(lista);
		colNombre.setCellValueFactory(new PropertyValueFactory<>("nombre"));
		colNombre.prefWidthProperty().bind(tabla.widthProperty().multiply(0.4));
		colApellido.setCellValueFactory(new PropertyValueFactory<>("apellido"));
		colApellido.prefWidthProperty().bind(tabla.widthProperty().multiply(0.4));
		colEdad.setCellValueFactory(new PropertyValueFactory<>("edad"));
		colEdad.prefWidthProperty().bind(tabla.widthProperty().multiply(0.2));
		colEdad.setStyle("-fx-alignment: CENTER-RIGHT;");
		
	}
}
